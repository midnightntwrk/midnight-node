name: CI + E2E

env:
  # Define environment variables for AWS credentials and region
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_EKS_CLUSTER_NAME: ${{ secrets.AWS_EKS_CLUSTER_NAME }}

on:
  pull_request:
    branches: [ '**' ]
  workflow_dispatch:
permissions:
  id-token: write
  contents: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:
  run:
    name: Build node and images
    permissions:
      id-token: write
      contents: read
    # 16 core machines seem to have gone walkabout.
    strategy:
      matrix:
        # Define matrix with platform and corresponding GitHub-hosted runner
        include:
          - platform: linux/amd64
            runner: ubuntu-latest-16-core-x64 # Default x86_64 GitHub-hosted runner
            arch: amd64
          # - platform: linux/arm64
          #   runner: ubuntu-latest-8-core-arm64 # Native ARM64 GitHub-hosted runner (public preview)
          #   arch: arm64

    runs-on: ${{ matrix.runner }}
    env:
      FORCE_COLOR: 1
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      - uses: earthly/actions-setup@43211c7a0eae5344d6d79fb4aaf209c8f8866203 # v1.0.13
        with:
          version: v0.8.0
          github-token: ${{ github.token }}
          use-cache: false
          allow-privileged: true

      - name: Checkout node repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0

      - name: Get current commit SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  #v3.6.0
        with:
          registry: ghcr.io
          username: MidnightCI
          password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Run build
        run: |
          mkdir -p $HOME/.cargo
          echo "[net]" >> $HOME/.cargo/config
          echo "git-fetch-with-cli = true" >> $HOME/.cargo/config

          # Set NETRC env var for Earthly to use for private repos
          echo "machine github.com" >> ./netrc
          echo "  login ${{secrets.MIDNIGHTCI_REPO}}" >> ./netrc
          echo "  password x-oauth-basic" >> ./netrc
          export NETRC="$(pwd)/netrc"

          . ./.envrc && earthly --secret GITHUB_TOKEN=${{ secrets.MIDNIGHTCI_PACKAGES_READ }} -P --ci --push +images

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        if: success() || failure()
        with:
          name: Wasm Runtime and binaries
          path: artifacts-${{ matrix.arch }}/

      - name: Upload test artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        if: success() || failure()
        with:
          name: Wasm Runtime and binaries
          path: test-artifacts-${{ matrix.arch }}/

  check-unused-deps:
    name: Check Unused Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: earthly/actions-setup@43211c7a0eae5344d6d79fb4aaf209c8f8866203 # v1.0.13
        with:
          version: v0.8.0
          github-token: ${{ github.token }}
          use-cache: false

      - name: Checkout node repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  #v3.6.0
        with:
          registry: ghcr.io
          username: MidnightCI
          password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Check Deps
        run: |
          mkdir -p $HOME/.cargo
          echo "[net]" >> $HOME/.cargo/config
          echo "git-fetch-with-cli = true" >> $HOME/.cargo/config

          # Set NETRC env var for Earthly to use for private repos
          echo "machine github.com" >> ./netrc
          echo "  login ${{secrets.MIDNIGHTCI_REPO}}" >> ./netrc
          echo "  password x-oauth-basic" >> ./netrc
          export NETRC="$(pwd)/netrc"

          . ./.envrc && earthly +check-deps

  check-benchmarks:
    name: Check Benchmarks Compilation
    runs-on: ubuntu-latest-16-core-x64
    steps:
      - uses: earthly/actions-setup@43211c7a0eae5344d6d79fb4aaf209c8f8866203 # v1.0.13
        with:
          version: v0.8.0
          github-token: ${{ github.token }}
          use-cache: false

      - name: Checkout node repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  #v3.6.0
        with:
          registry: ghcr.io
          username: MidnightCI
          password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Check Benchmarks
        run: |
          mkdir -p $HOME/.cargo
          echo "[net]" >> $HOME/.cargo/config
          echo "git-fetch-with-cli = true" >> $HOME/.cargo/config

          # Set NETRC env var for Earthly to use for private repos
          echo "machine github.com" >> ./netrc
          echo "  login ${{secrets.MIDNIGHTCI_REPO}}" >> ./netrc
          echo "  password x-oauth-basic" >> ./netrc
          export NETRC="$(pwd)/netrc"

          . ./.envrc && earthly +check-benchmarks

  rebuild-genesis:
    name: Check Genesis Rebuild
    needs: run
    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest-16-core-x64
    env:
      FORCE_COLOR: 1
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      - uses: earthly/actions-setup@43211c7a0eae5344d6d79fb4aaf209c8f8866203 # v1.0.13
        with:
          version: v0.8.0
          github-token: ${{ github.token }}
          use-cache: false

      - name: Checkout node repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0

      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Get current commit SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  #v3.6.0
        with:
          registry: ghcr.io
          username: MidnightCI
          password: ${{ secrets.MIDNIGHTCI_PACKAGES_READ }}

      - name: Check Genesis Rebuild
        run: |
          mkdir -p $HOME/.cargo
          echo "[net]" >> $HOME/.cargo/config
          echo "git-fetch-with-cli = true" >> $HOME/.cargo/config

          # Set NETRC env var for Earthly to use for private repos
          echo "machine github.com" >> ./netrc
          echo "  login ${{secrets.MIDNIGHTCI_REPO}}" >> ./netrc
          echo "  password x-oauth-basic" >> ./netrc
          export NETRC="$(pwd)/netrc"

          . ./.envrc && earthly --build-arg NODE_IMAGE=ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-amd64 --build-arg TOOLKIT_IMAGE=ghcr.io/midnight-ntwrk/midnight-node-toolkit:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-amd64 +rebuild-genesis

  hardfork-e2e:
    name: Hardfork E2E
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/reusable-e2e-tests
        with:
          just-command: hardfork-e2e
          node-image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
          upgrader-image: ghcr.io/midnight-ntwrk/midnight-hardfork-test-upgrader:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-
          ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

  ledger-rollback-e2e:
    name: Ledger Rollback E2E
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
      # TODO UNSHIELDED: Hard-fork capability broken after latest `ledger-5.0.0` release
      # - uses: ./.github/actions/reusable-e2e-tests
      #   with:
      #     just-command: ledger-rollback-e2e
      #     node-image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
      #     upgrader-image: ghcr.io/midnight-ntwrk/midnight-hardfork-test-upgrader:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-
      #     ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}
      - name: 💤 Dummy step to bypass real test
        run: echo "Skipping test — dummy command"

  node-e2e:
    name: Node E2E
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
      # - name: Get Version and git commit
      #   id: meta
      #   run: |
      #     echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
      #     version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
      #     echo "version=$version" >> $GITHUB_OUTPUT
      # - uses: ./.github/actions/reusable-e2e-tests
      #   with:
      #     just-command: node-e2e
      #     node-image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
      #     toolkit-image: ghcr.io/midnight-ntwrk/midnight-node-toolkit:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-amd64
      #     upgrader-image: ghcr.io/midnight-ntwrk/midnight-hardfork-test-upgrader:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-
      #     ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}
      - name: 💤 Dummy step to bypass real test
        run: echo "Skipping test — dummy command"

  toolkit-e2e:
    name: Toolkit E2E
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/reusable-e2e-tests
        with:
          just-command: toolkit-e2e
          node-image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
          toolkit-image: ghcr.io/midnight-ntwrk/midnight-node-toolkit:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-amd64
          ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

  toolkit-mint-e2e:
    name: Toolkit Mint E2E
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/reusable-e2e-tests
        with:
          just-command: toolkit-mint-e2e
          node-image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
          toolkit-image: ghcr.io/midnight-ntwrk/midnight-node-toolkit:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-amd64
          ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

  toolkit-ut-e2e:
    name: Toolkit Unshielded Token E2E
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/reusable-e2e-tests
        with:
          just-command: toolkit-ut-e2e
          node-image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
          toolkit-image: ghcr.io/midnight-ntwrk/midnight-node-toolkit:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-amd64
          ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

  metadata-check:
    name: Metadata Check
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - uses: earthly/actions-setup@43211c7a0eae5344d6d79fb4aaf209c8f8866203 # v1.0.13
        with:
          version: v0.8.0
          github-token: ${{ github.token }}
          use-cache: false
          allow-privileged: true
      - name: Login to GHCR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  #v3.6.0
        with:
          registry: ghcr.io
          username: MidnightCI
          password: ${{ secrets.MIDNIGHTCI_PACKAGES_READ }}
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0

      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Run metadata check
        run: |
          # Set NETRC env var for Earthly to use for private repos
          echo "machine github.com" >> ./netrc
          echo "  login ${{secrets.MIDNIGHTCI_REPO}}" >> ./netrc
          echo "  password x-oauth-basic" >> ./netrc
          export NETRC="$(pwd)/netrc"

          . ./.envrc && earthly --ci -P --build-arg NODE_IMAGE=ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-amd64 +check-metadata

  toolkit-contracts-e2e:
    name: Toolkit Contracts E2E
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # 5.0.0
      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/reusable-e2e-tests
        with:
          just-command: toolkit-contracts-e2e
          node-image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
          toolkit-image: ghcr.io/midnight-ntwrk/midnight-node-toolkit:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-amd64
          ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

  startup-dev-e2e:
    name: Startup E2E in dev mode
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/reusable-e2e-tests
        with:
          just-command: startup-dev-e2e
          node-image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
          ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

  genesis-undeployed-e2e:
    name: Genesis Wallets E2E for Undeployed network
    needs: run
    runs-on: ubuntu-latest-8-core-x64
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> $GITHUB_OUTPUT
      - uses: ./.github/actions/reusable-e2e-tests
        with:
          just-command: genesis-wallets-undeployed-e2e
          node-image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
          toolkit-image: ghcr.io/midnight-ntwrk/midnight-node-toolkit:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_hash }}-amd64
          ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

  build-indexer-images:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
    runs-on: ubuntu-latest-16-core-x64
    permissions:
      pull-requests: write
      packages: read
      contents: write
    outputs:
      indexer_api_image: ${{ steps.image_meta.outputs.indexer_api_image }}
      chain_indexer_image: ${{ steps.image_meta.outputs.chain_indexer_image }}
      wallet_indexer_image: ${{ steps.image_meta.outputs.wallet_indexer_image }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
        with:
          submodules: true

      - name: Install just
        uses: taiki-e/install-action@eba4035583f0f9b001a27be2cce0a136d05d05e3  #v2.62.23
        with:
          tool: just

      - name: Build indexer images
        run: |
          mkdir -p $HOME/.cargo
          echo "[net]" >> $HOME/.cargo/config
          echo "git-fetch-with-cli = true" >> $HOME/.cargo/config

          # Set NETRC env var for Earthly to use for private repos
          echo "machine github.com" >> ./netrc
          echo "  login ${{secrets.MIDNIGHTCI_REPO}}" >> ./netrc
          echo "  password x-oauth-basic" >> ./netrc
          export NETRC="$(pwd)/netrc"

          # Force AMD64 architecture for all builds
          export DOCKER_DEFAULT_PLATFORM=linux/amd64
          export DOCKER_BUILDKIT=1
          export BUILDX_PLATFORM=linux/amd64

          # Login to Docker once at the start
          echo "🔐 Logging into Docker..."
          echo ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }} | docker login ghcr.io -u MidnightCI --password-stdin

          pwd
          ls
          cd indexer
          ls
          . .envrc

          # Check available docker builders and platforms
          echo "Available docker builders:"
          docker buildx ls
          echo "Current platform: $(uname -m)"
          echo "DOCKER_DEFAULT_PLATFORM: $DOCKER_DEFAULT_PLATFORM"

          # Build with explicit AMD64 platform
          echo "🔧 Building indexer-api with AMD64 platform..."
          DOCKER_DEFAULT_PLATFORM=linux/amd64 just build-docker-image indexer-api

          echo "🔧 Building chain-indexer with AMD64 platform..."
          DOCKER_DEFAULT_PLATFORM=linux/amd64 just build-docker-image chain-indexer

          echo "🔧 Building wallet-indexer with AMD64 platform..."
          DOCKER_DEFAULT_PLATFORM=linux/amd64 just build-docker-image wallet-indexer

          # Retag images with main repo's commit hash (not submodule's)
          echo "🏷️ Retagging images with main repo commit hash..."

          # Get commit hashes before changing directories
          cd ..  # Go back to main repo directory
          MAIN_COMMIT=$(git rev-parse --short=8 HEAD)
          echo "Main repo commit: $MAIN_COMMIT"

          cd indexer
          SUBMODULE_COMMIT=$(git rev-parse --short=8 HEAD)
          echo "Submodule commit: $SUBMODULE_COMMIT"

          # Retag all indexer images
          echo "🏷️ Retagging images..."
          docker tag ghcr.io/midnight-ntwrk/indexer-api:${SUBMODULE_COMMIT} ghcr.io/midnight-ntwrk/indexer-api:${MAIN_COMMIT}
          docker tag ghcr.io/midnight-ntwrk/chain-indexer:${SUBMODULE_COMMIT} ghcr.io/midnight-ntwrk/chain-indexer:${MAIN_COMMIT}
          docker tag ghcr.io/midnight-ntwrk/wallet-indexer:${SUBMODULE_COMMIT} ghcr.io/midnight-ntwrk/wallet-indexer:${MAIN_COMMIT}

          # Push the new tags
          echo "📤 Pushing retagged images..."
          docker push ghcr.io/midnight-ntwrk/indexer-api:${MAIN_COMMIT}
          docker push ghcr.io/midnight-ntwrk/chain-indexer:${MAIN_COMMIT}
          docker push ghcr.io/midnight-ntwrk/wallet-indexer:${MAIN_COMMIT}

          echo "✅ Images retagged and pushed successfully!"

      - name: Expose image refs as outputs
        id: image_meta
        run: |
          # Use main repo's commit hash (not submodule's)
          short_hash=$(git rev-parse --short=8 HEAD)
          echo "indexer_api_image=ghcr.io/midnight-ntwrk/indexer-api:${short_hash}" >> "$GITHUB_OUTPUT"
          echo "chain_indexer_image=ghcr.io/midnight-ntwrk/chain-indexer:${short_hash}" >> "$GITHUB_OUTPUT"
          echo "wallet_indexer_image=ghcr.io/midnight-ntwrk/wallet-indexer:${short_hash}" >> "$GITHUB_OUTPUT"

      - uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  #v2.8.1

      - name: Configure git for private repos
        run: |
          git config --global url."https://${GH_PAT}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
        env:
          GH_PAT: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Install cargo-nextest
        run: |
          cargo install cargo-nextest --locked

      - name: just test
        env:
          APP__INFRA__SECRET: ${{ secrets.APP__INFRA__SECRET }}
        run: |
          . ./.envrc
          git config --global url."https://@github.com".insteadOf "ssh://git@github.com"
          cd indexer
          just feature=standalone test

  local-environment-tests:
    name: Local Environment Tests
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
    needs: [run, build-indexer-images]
    runs-on: ubuntu-latest-16-core-x64
    permissions:
      pull-requests: write
      packages: read
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0
        with:
          submodules: true

      - name: Get Version and git commit
        id: meta
        run: |
          set -euo pipefail

          # Main repo short hash
          short_hash=$(git rev-parse --short=8 HEAD)
          echo "short_hash=$short_hash" >> "$GITHUB_OUTPUT"

          # App version from node/Cargo.toml
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "version=$version" >> "$GITHUB_OUTPUT"

          # Indexer short hash (if indexer is its own git repo/submodule)
          pushd indexer >/dev/null
          indexer_tag=$(git rev-parse --short=8 HEAD)
          popd >/dev/null
          echo "indexer_tag=$indexer_tag" >> "$GITHUB_OUTPUT"

          echo "Get Version and git commit"
          echo "short_hash: $short_hash"
          echo "version: $version"
          echo "indexer_tag: $indexer_tag"

      - name: Deploy and test against local environment
        uses: ./.github/actions/local-environment-tests
        with:
          tag: CI
          image: ghcr.io/midnight-ntwrk/midnight-node:${{ steps.meta.outputs.version }}-dev-${{ steps.meta.outputs.short_hash }}-amd64
          indexer-api-image: ${{ needs.build-indexer-images.outputs.indexer_api_image }}
          chain-indexer-image: ${{ needs.build-indexer-images.outputs.chain_indexer_image }}
          wallet-indexer-image: ${{ needs.build-indexer-images.outputs.wallet_indexer_image }}
          indexer-tag: ${{ steps.meta.outputs.indexer_tag }}
          sha: ${{ steps.meta.outputs.short_hash }}
          tests: premerge
          ghcr-password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}


  ephemeral-environment-tests:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
    # needs:
    #   - hardfork-e2e
    #   - ledger-rollback-e2e
    #   - node-e2e
    #   - tx-generator-e2e
    #   - startup-dev-e2e
    #   - genesis-undeployed-e2e

    runs-on: ubuntu-latest-16-core-x64
    permissions:
      id-token: write
      contents: read
    steps:

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  #v5.0.0

      - name: Get Version and git commit
        id: meta
        run: |
          echo "short_hash=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT
          version=$(grep -m 1 '^version =' node/Cargo.toml | cut -d '"' -f2)
          echo "Get Version and git commit"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8  # v5.1.0
        with:
          role-to-assume: arn:aws:iam::596662952274:role/MidnightGithubActionsAdminRole
          aws-region: eu-west-1
          role-duration-seconds: 3600


      - name: Pull Kubeconfig and Set Locally
        run: |
          aws eks update-kubeconfig \
            --name k0-eks-platform-dev-eu-01 \
            --region eu-west-1 \
        shell: bash

      # - name: Deploy and test ephemeral environment
      #   uses: ./.github/actions/ephemeral-environment-tests
      #   with:
      #     sha: ${{ github.sha }}
      #     image: ghcr.io/midnight-ntwrk/midnight-node:0.12.1
      #     tag: ${{ github.ref_name }}
      #     ghcr-password: ${{ secrets.MIDNIGHTBOT_PACKAGES_WRITE }}
      #     aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     aws-eks-cluster-name: ${{ secrets.AWS_EKS_CLUSTER_NAME }}
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
