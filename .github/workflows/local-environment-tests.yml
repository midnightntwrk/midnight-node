name: local-environment-tests 

# Using local-environment in CI
# - On PR open, build image from branch
# - Deploy image in local-environment on ephemeral github actions runner
# - Test local-environment (for now just make sure it comes up)
# - Upload container logs as artifacts
# - Terminate local-environment
# - Pass / Fail CI check based on the above
# - Optionally set CI check status as a required check for PR merge. 
#   This ensures codebase changes that will not run in the local-environment cannot be merged

on:
#  pull_request:
#    types: [opened, synchronize, reopened]
#    branches:
#      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  local-environment-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Get current commit SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install Earthly
        uses: earthly/actions-setup@v1
        with:
          version: v0.8.0

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u USERNAME --password-stdin

      - name: Build Docker Image Locally
        run: earthly --ci +node-image --platform=linux/amd64 --tags=midnight-node-ci:${{ steps.get_sha.outputs.sha }}
        shell: bash
   
      - name: Deploy local-environment
        run: |
          cd local-environment
          bash setup.sh --non-interactive --node-image midnight-node-ci:${{ steps.get_sha.outputs.sha }} --tests
          docker compose up -d
          cd ../../
        shell: bash
 
      - name: Wait for midnight-node-1 to start
        id: wait-pc-node
        continue-on-error: true
        run: |
          # Wait for the Cardano node to be ready
          while ! docker exec cardano-node-1 [ -e /shared/cardano.ready ]; do sleep 1; done
          echo "Cardano network is ready! Waiting for Partner Chain first node to start..."
          INIT_TIMESTAMP=$(docker exec cardano-node-1 cat /shared/cardano.start)
          echo "INIT_TIMESTAMP=$INIT_TIMESTAMP" >> $GITHUB_ENV
  
          epoch=0
          restart_count=0
          max_restarts=10
  
          while ! docker exec midnight-node-1 [ -e /shared/midnight-node-1.ready ]; do
            epoch=$(docker exec cardano-node-1 cardano-cli latest query tip --testnet-magic 42 | jq -r .epoch)
            echo "Epoch: $epoch"
            container_status=$(docker inspect -f '{{.State.Status}}' midnight-node-1)
            echo "Container status: $container_status"
            if [ "$container_status" = "restarting" ]; then
              restart_count=$((restart_count + 1))
              echo "midnight-node-1 is restarting ($restart_count/$max_restarts)"
              if [ "$restart_count" -ge "$max_restarts" ]; then
                echo "midnight-node-1 has restarted $restart_count times. Failing early."
                exit 1
              fi
            else
              restart_count=0
            fi
            if [ "$epoch" -ge 2 ]; then
              echo "Epoch has reached 2 and midnight-node-1 is still not ready."
              exit 1
            fi
            sleep 10
          done
        shell: bash

      - name: Collect early logs
        run: |
          mkdir -p local-environment-logs-initial
          docker ps -a --format '{{.Names}}' | while read line; do
            echo "Collecting logs for container $line"
            docker logs "$line" > "local-environment-logs-initial/$line.log" 2>&1 || true
          done
        shell: bash

      - name: Upload Docker logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: local-environment-logs-initial
          path: local-environment-logs-initial/

      - name: Fail the job
        if: ${{ steps.wait-pc-node.outcome == 'failure' }}
        run: exit 1
        shell: bash

      - name: Run for 2 minutes
        run: |
          sleep 120

      - name: Collect full container logs
        if: always()
        run: |
          mkdir -p local-environment-logs-full
          docker ps -a --format '{{.Names}}' | while read line; do
            echo "Collecting logs for container $line"
            docker logs "$line" > "local-environment-logs-full/$line.log" 2>&1 || true
          done
        shell: bash

      - name: Upload container logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: local-environment-logs-full
          path: local-environment-logs-full/

      - name: Stop local-environment
        run: |
          cd local-environment
          docker compose down --volumes
        shell: bash
