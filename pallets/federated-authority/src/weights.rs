
//! Autogenerated weights for `pallet_federated_authority`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 49.0.0
//! DATE: 2025-09-29, STEPS: `100`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/midnight-node
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/midnight-node-runtime/midnight_node_runtime.wasm
// --genesis-builder=spec
// --wasm-execution=compiled
// --pallet=pallet_federated_authority
// --extrinsic=*
// --steps
// 100
// --repeat
// 2
// --output
// pallets/federated-authority/src/weights.rs
// --template=./res/weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_federated_authority`.
pub trait WeightInfo {
	fn motion_approve(a: u32, ) -> Weight;
	fn motion_approve_new() -> Weight;
	fn motion_approve_ended() -> Weight;
	fn motion_approve_already_approved(a: u32, ) -> Weight;
	fn motion_approve_exceeds_bounds() -> Weight;
	fn motion_revoke(a: u32, ) -> Weight;
	fn motion_revoke_ended() -> Weight;
	fn motion_revoke_not_found() -> Weight;
	fn motion_revoke_approval_missing(a: u32, ) -> Weight;
	fn motion_revoke_remove() -> Weight;
	fn motion_close_still_ongoing() -> Weight;
	fn motion_close_expired() -> Weight;
	fn motion_close_approved() -> Weight;
	fn motion_close_not_found() -> Weight;
}

/// Weights for `pallet_federated_authority` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 2]`.
	fn motion_approve(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `177 + a * (5 ±0)`
		//  Estimated: `3642 + a * (5 ±0)`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3642)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(a.into()))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_approve_new() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3579)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_approve_ended() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3652)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 2]`.
	fn motion_approve_already_approved(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + a * (4 ±0)`
		//  Estimated: `3648 + a * (4 ±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(5_500_000, 3648)
			// Standard Error: 50_497
			.saturating_add(Weight::from_parts(500_000, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(a.into()))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_approve_exceeds_bounds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3656)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 2]`.
	fn motion_revoke(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + a * (4 ±0)`
		//  Estimated: `3648 + a * (4 ±0)`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(12_640_000, 3648)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(a.into()))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_revoke_ended() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 3656)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_revoke_not_found() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 3579)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 2]`.
	fn motion_revoke_approval_missing(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + a * (4 ±0)`
		//  Estimated: `3648 + a * (4 ±0)`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_740_000, 3648)
			// Standard Error: 240_168
			.saturating_add(Weight::from_parts(130_000, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(a.into()))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_revoke_remove() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3652)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_close_still_ongoing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 3652)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_close_expired() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3652)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_close_approved() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 3656)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_close_not_found() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 3579)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 2]`.
	fn motion_approve(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `177 + a * (5 ±0)`
		//  Estimated: `3642 + a * (5 ±0)`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3642)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(a.into()))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_approve_new() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3579)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_approve_ended() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3652)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 2]`.
	fn motion_approve_already_approved(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + a * (4 ±0)`
		//  Estimated: `3648 + a * (4 ±0)`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(5_500_000, 3648)
			// Standard Error: 50_497
			.saturating_add(Weight::from_parts(500_000, 0).saturating_mul(a.into()))
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(a.into()))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_approve_exceeds_bounds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3656)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 2]`.
	fn motion_revoke(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + a * (4 ±0)`
		//  Estimated: `3648 + a * (4 ±0)`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(12_640_000, 3648)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(a.into()))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_revoke_ended() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(6_000_000, 3656)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_revoke_not_found() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 3579)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 2]`.
	fn motion_revoke_approval_missing(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183 + a * (4 ±0)`
		//  Estimated: `3648 + a * (4 ±0)`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_740_000, 3648)
			// Standard Error: 240_168
			.saturating_add(Weight::from_parts(130_000, 0).saturating_mul(a.into()))
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(a.into()))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_revoke_remove() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3652)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_close_still_ongoing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(6_000_000, 3652)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_close_expired() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3652`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3652)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:1)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_close_approved() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3656`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 3656)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthority::Motions` (r:1 w:0)
	/// Proof: `FederatedAuthority::Motions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn motion_close_not_found() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 3579)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
	}
}
