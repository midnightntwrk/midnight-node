
//! Autogenerated weights for `pallet_federated_authority_observation`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 49.1.0
//! DATE: 2025-10-30, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/midnight-node
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/midnight-node-runtime/midnight_node_runtime.wasm
// --genesis-builder=spec
// --wasm-execution=compiled
// --pallet=pallet_federated_authority_observation
// --extrinsic=*
// --steps
// 2
// --repeat
// 1
// --output
// pallets/federated-authority-observation/src/weights.rs
// --template=./res/weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_federated_authority_observation`.
pub trait WeightInfo {
	fn reset_members_only_council(a: u32, b: u32, ) -> Weight;
	fn reset_members_only_technical_committee(a: u32, b: u32, ) -> Weight;
	fn reset_members(a: u32, b: u32, ) -> Weight;
	fn reset_members_none(a: u32, b: u32, ) -> Weight;
	fn set_council_address() -> Weight;
	fn set_technical_committee_address() -> Weight;
	fn set_council_policy_id() -> Weight;
	fn set_technical_committee_policy_id() -> Weight;
}

/// Weights for `pallet_federated_authority_observation` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CouncilMembership::Members` (r:1 w:1)
	/// Proof: `CouncilMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `CouncilMembership::Prime` (r:1 w:0)
	/// Proof: `CouncilMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Members` (r:1 w:0)
	/// Proof: `TechnicalCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:0 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 9]`.
	/// The range of component `b` is `[1, 9]`.
	fn reset_members_only_council(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490 + a * (64 ±0) + b * (32 ±0)`
		//  Estimated: `3529 + a * (64 ±0) + b * (32 ±0)`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(26_500_000, 3529)
			// Standard Error: 108_253
			.saturating_add(Weight::from_parts(62_500, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(b.into()))
	}
	/// Storage: `CouncilMembership::Members` (r:1 w:0)
	/// Proof: `CouncilMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Members` (r:1 w:1)
	/// Proof: `TechnicalCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	/// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Prime` (r:1 w:0)
	/// Proof: `TechnicalCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommittee::Members` (r:0 w:1)
	/// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	/// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 9]`.
	/// The range of component `b` is `[1, 9]`.
	fn reset_members_only_technical_committee(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `415 + a * (32 ±0) + b * (64 ±0)`
		//  Estimated: `3529 + a * (32 ±0) + b * (64 ±0)`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(22_125_000, 3529)
			// Standard Error: 108_253
			.saturating_add(Weight::from_parts(62_500, 0).saturating_mul(a.into()))
			// Standard Error: 108_253
			.saturating_add(Weight::from_parts(312_500, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(b.into()))
	}
	/// Storage: `CouncilMembership::Members` (r:1 w:1)
	/// Proof: `CouncilMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `CouncilMembership::Prime` (r:1 w:0)
	/// Proof: `CouncilMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Members` (r:1 w:1)
	/// Proof: `TechnicalCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	/// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCommitteeMembership::Prime` (r:1 w:0)
	/// Proof: `TechnicalCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:0 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCommittee::Members` (r:0 w:1)
	/// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	/// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 9]`.
	/// The range of component `b` is `[1, 9]`.
	fn reset_members(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `755 + a * (54 ±0) + b * (54 ±0)`
		//  Estimated: `9242 + a * (55 ±0) + b * (55 ±0)`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(40_500_000, 9242)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(b.into()))
	}
	/// Storage: `CouncilMembership::Members` (r:1 w:0)
	/// Proof: `CouncilMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Members` (r:1 w:0)
	/// Proof: `TechnicalCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 10]`.
	fn reset_members_none(_a: u32, _b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `243 + a * (32 ±0) + b * (32 ±0)`
		//  Estimated: `1806`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(11_222_222, 1806)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `FederatedAuthorityObservation::MainChainCouncilAddress` (r:0 w:1)
	/// Proof: `FederatedAuthorityObservation::MainChainCouncilAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_council_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthorityObservation::MainChainTechnicalCommitteeAddress` (r:0 w:1)
	/// Proof: `FederatedAuthorityObservation::MainChainTechnicalCommitteeAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_technical_committee_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthorityObservation::MainChainCouncilPolicyId` (r:0 w:1)
	/// Proof: `FederatedAuthorityObservation::MainChainCouncilPolicyId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_council_policy_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthorityObservation::MainChainTechnicalCommitteePolicyId` (r:0 w:1)
	/// Proof: `FederatedAuthorityObservation::MainChainTechnicalCommitteePolicyId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_technical_committee_policy_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `CouncilMembership::Members` (r:1 w:1)
	/// Proof: `CouncilMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `CouncilMembership::Prime` (r:1 w:0)
	/// Proof: `CouncilMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Members` (r:1 w:0)
	/// Proof: `TechnicalCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:0 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 9]`.
	/// The range of component `b` is `[1, 9]`.
	fn reset_members_only_council(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490 + a * (64 ±0) + b * (32 ±0)`
		//  Estimated: `3529 + a * (64 ±0) + b * (32 ±0)`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(26_500_000, 3529)
			// Standard Error: 108_253
			.saturating_add(Weight::from_parts(62_500, 0).saturating_mul(a.into()))
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(b.into()))
	}
	/// Storage: `CouncilMembership::Members` (r:1 w:0)
	/// Proof: `CouncilMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Members` (r:1 w:1)
	/// Proof: `TechnicalCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	/// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Prime` (r:1 w:0)
	/// Proof: `TechnicalCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommittee::Members` (r:0 w:1)
	/// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	/// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 9]`.
	/// The range of component `b` is `[1, 9]`.
	fn reset_members_only_technical_committee(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `415 + a * (32 ±0) + b * (64 ±0)`
		//  Estimated: `3529 + a * (32 ±0) + b * (64 ±0)`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(22_125_000, 3529)
			// Standard Error: 108_253
			.saturating_add(Weight::from_parts(62_500, 0).saturating_mul(a.into()))
			// Standard Error: 108_253
			.saturating_add(Weight::from_parts(312_500, 0).saturating_mul(b.into()))
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(b.into()))
	}
	/// Storage: `CouncilMembership::Members` (r:1 w:1)
	/// Proof: `CouncilMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `Council::Proposals` (r:1 w:0)
	/// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `CouncilMembership::Prime` (r:1 w:0)
	/// Proof: `CouncilMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Members` (r:1 w:1)
	/// Proof: `TechnicalCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommittee::Proposals` (r:1 w:0)
	/// Proof: `TechnicalCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCommitteeMembership::Prime` (r:1 w:0)
	/// Proof: `TechnicalCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:0 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Council::Prime` (r:0 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCommittee::Members` (r:0 w:1)
	/// Proof: `TechnicalCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TechnicalCommittee::Prime` (r:0 w:1)
	/// Proof: `TechnicalCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `a` is `[1, 9]`.
	/// The range of component `b` is `[1, 9]`.
	fn reset_members(a: u32, b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `755 + a * (54 ±0) + b * (54 ±0)`
		//  Estimated: `9242 + a * (55 ±0) + b * (55 ±0)`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(40_500_000, 9242)
			.saturating_add(ParityDbWeight::get().reads(9_u64))
			.saturating_add(ParityDbWeight::get().writes(9_u64))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 55).saturating_mul(b.into()))
	}
	/// Storage: `CouncilMembership::Members` (r:1 w:0)
	/// Proof: `CouncilMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `TechnicalCommitteeMembership::Members` (r:1 w:0)
	/// Proof: `TechnicalCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[1, 10]`.
	/// The range of component `b` is `[1, 10]`.
	fn reset_members_none(_a: u32, _b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `243 + a * (32 ±0) + b * (32 ±0)`
		//  Estimated: `1806`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(11_222_222, 1806)
			.saturating_add(ParityDbWeight::get().reads(2_u64))
	}
	/// Storage: `FederatedAuthorityObservation::MainChainCouncilAddress` (r:0 w:1)
	/// Proof: `FederatedAuthorityObservation::MainChainCouncilAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_council_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthorityObservation::MainChainTechnicalCommitteeAddress` (r:0 w:1)
	/// Proof: `FederatedAuthorityObservation::MainChainTechnicalCommitteeAddress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_technical_committee_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthorityObservation::MainChainCouncilPolicyId` (r:0 w:1)
	/// Proof: `FederatedAuthorityObservation::MainChainCouncilPolicyId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_council_policy_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `FederatedAuthorityObservation::MainChainTechnicalCommitteePolicyId` (r:0 w:1)
	/// Proof: `FederatedAuthorityObservation::MainChainTechnicalCommitteePolicyId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_technical_committee_policy_id() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
}
