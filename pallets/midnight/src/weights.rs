// This file is part of midnight-node.
// Copyright (C) 2025 Midnight Foundation
// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for `pallet_midnight`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-12-07, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-2.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/midnight-node
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/midnight-node-runtime/midnight_node_runtime.wasm
// --genesis-builder=spec
// --wasm-execution=compiled
// --pallet=pallet_midnight
// --extrinsic=*
// --steps
// 2
// --repeat
// 1
// --output
// pallets/midnight/src/weights_new.rs
// --template=./res/weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_midnight`.
pub trait WeightInfo {
	fn send_standard_transaction(a: u32, b: u32, c: u32, d: u32, e: u32, f: u32, g: u32, h: u32, i: u32, j: u32, k: u32, ) -> Weight;
	fn send_claim_mint_transaction() -> Weight;
    fn execute_contract_call() -> Weight;
    fn deserialize_transaction() -> Weight; 
	fn on_finalize() -> Weight;
}

/// Weights for `pallet_midnight` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Midnight::NetworkId` (r:1 w:0)
	/// Proof: `Midnight::NetworkId` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `System::ParentHash` (r:1 w:0)
	/// Proof: `System::ParentHash` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Midnight::State` (r:1 w:1)
	/// Proof: `Midnight::State` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 2]`.
	/// The range of component `b` is `[0, 2]`.
	/// The range of component `c` is `[0, 2]`.
	/// The range of component `d` is `[0, 2]`.
	/// The range of component `e` is `[0, 2]`.
	/// The range of component `f` is `[0, 2]`.
	/// The range of component `g` is `[0, 2]`.
	/// The range of component `h` is `[0, 2]`.
	/// The range of component `i` is `[0, 2]`.
	/// The range of component `j` is `[0, 2]`.
	/// The range of component `k` is `[0, 2]`.
	fn send_standard_transaction(a: u32, b: u32, c: u32, d: u32, e: u32, f: u32, g: u32, h: u32, i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `28214 + a * (232 ±0) + d * (548 ±0)`
		//  Estimated: `1517`
		// Minimum execution time: 36_727_000_000 picoseconds.
		Weight::from_parts(2_884_571_428, 1517)
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(960_071_428, 0).saturating_mul(a.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(3_022_571_428, 0).saturating_mul(b.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(435_071_428, 0).saturating_mul(c.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(486_071_428, 0).saturating_mul(d.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(5_129_571_428, 0).saturating_mul(e.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(5_370_071_428, 0).saturating_mul(f.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(1_190_571_428, 0).saturating_mul(g.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(70_071_428, 0).saturating_mul(h.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(475_071_428, 0).saturating_mul(i.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(475_071_428, 0).saturating_mul(j.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(5_195_071_428, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Midnight::NetworkId` (r:1 w:0)
	/// Proof: `Midnight::NetworkId` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `System::ParentHash` (r:1 w:0)
	/// Proof: `System::ParentHash` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Midnight::State` (r:1 w:1)
	/// Proof: `Midnight::State` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn send_claim_mint_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `941`
		//  Estimated: `1517`
		// Minimum execution time: 3_512_000_000 picoseconds.
		Weight::from_parts(3_512_000_000, 1517)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn execute_contract_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_641_000_000 picoseconds.
		Weight::from_parts(1_641_000_000, 0)
	}
    fn deserialize_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_939_000_000 picoseconds.
		Weight::from_parts(13_939_000_000, 0)
	}
	fn on_finalize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 0)
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Midnight::NetworkId` (r:1 w:0)
	/// Proof: `Midnight::NetworkId` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `System::ParentHash` (r:1 w:0)
	/// Proof: `System::ParentHash` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Midnight::State` (r:1 w:1)
	/// Proof: `Midnight::State` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	/// The range of component `a` is `[0, 2]`.
	/// The range of component `b` is `[0, 2]`.
	/// The range of component `c` is `[0, 2]`.
	/// The range of component `d` is `[0, 2]`.
	/// The range of component `e` is `[0, 2]`.
	/// The range of component `f` is `[0, 2]`.
	/// The range of component `g` is `[0, 2]`.
	/// The range of component `h` is `[0, 2]`.
	/// The range of component `i` is `[0, 2]`.
	/// The range of component `j` is `[0, 2]`.
	/// The range of component `k` is `[0, 2]`.
	fn send_standard_transaction(a: u32, b: u32, c: u32, d: u32, e: u32, f: u32, g: u32, h: u32, i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `28214 + a * (232 ±0) + d * (548 ±0)`
		//  Estimated: `1517`
		// Minimum execution time: 36_727_000_000 picoseconds.
		Weight::from_parts(2_884_571_428, 1517)
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(960_071_428, 0).saturating_mul(a.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(3_022_571_428, 0).saturating_mul(b.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(435_071_428, 0).saturating_mul(c.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(486_071_428, 0).saturating_mul(d.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(5_129_571_428, 0).saturating_mul(e.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(5_370_071_428, 0).saturating_mul(f.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(1_190_571_428, 0).saturating_mul(g.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(70_071_428, 0).saturating_mul(h.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(475_071_428, 0).saturating_mul(i.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(475_071_428, 0).saturating_mul(j.into()))
			// Standard Error: 142_574_434
			.saturating_add(Weight::from_parts(5_195_071_428, 0).saturating_mul(k.into()))
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Midnight::NetworkId` (r:1 w:0)
	/// Proof: `Midnight::NetworkId` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	/// Storage: `System::ParentHash` (r:1 w:0)
	/// Proof: `System::ParentHash` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Midnight::State` (r:1 w:1)
	/// Proof: `Midnight::State` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn send_claim_mint_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `941`
		//  Estimated: `1517`
		// Minimum execution time: 3_512_000_000 picoseconds.
		Weight::from_parts(3_512_000_000, 1517)
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	fn execute_contract_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_641_000_000 picoseconds.
		Weight::from_parts(1_641_000_000, 0)
	}
	fn deserialize_transaction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_939_000_000 picoseconds.
		Weight::from_parts(13_939_000_000, 0)
	}
	fn on_finalize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(0, 0)
	}
}
