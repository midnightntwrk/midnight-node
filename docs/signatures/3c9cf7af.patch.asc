-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

- From 3c9cf7af376f1a99919bd3fe88e2889e2cf1b58f Mon Sep 17 00:00:00 2001
From: Sebastian Bach <sebtomba@gmail.com>
Date: Wed, 14 Jun 2023 14:24:12 +0200
Subject: [PATCH] [PM-6003] Limiting block computation for better stability

- ---
 pallets/midnight/src/lib.rs     |  7 ++++++-
 pallets/midnight/src/weights.rs | 27 +++++++++++++++++++++++++++
 runtime/src/lib.rs              | 25 ++++++++++++++++++++-----
 3 files changed, 53 insertions(+), 6 deletions(-)
 create mode 100644 pallets/midnight/src/weights.rs

diff --git a/pallets/midnight/src/lib.rs b/pallets/midnight/src/lib.rs
index dd16692b..d21d7a89 100644
- --- a/pallets/midnight/src/lib.rs
+++ b/pallets/midnight/src/lib.rs
@@ -4,6 +4,8 @@
 /// Learn more about FRAME and the core library of Substrate FRAME pallets:
 /// <https://docs.substrate.io/reference/frame-pallets/>
 pub use pallet::*;
+pub mod weights;
+pub use weights::*;
 
 #[cfg(feature = "runtime-benchmarks")]
 mod benchmarking;
@@ -28,6 +30,9 @@ pub mod pallet {
 	pub trait Config: frame_system::Config {
 		/// Because this pallet emits events, it depends on the runtime's definition of an event.
 		type RuntimeEvent: From<Event> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
+
+		/// Information on runtime weights.
+		type WeightInfo: crate::weights::WeightInfo;
 	}
 
 	// The pallet's runtime storage items.
@@ -86,7 +91,7 @@ pub mod pallet {
 	#[pallet::call]
 	impl<T: Config> Pallet<T> {
 		#[pallet::call_index(0)]
- -		#[pallet::weight(10_000 + T::DbWeight::get().writes(1).ref_time())]
+		#[pallet::weight(T::WeightInfo::send_mn_transaction(encoded_transaction))]
 		pub fn send_mn_transaction(
 			_origin: OriginFor<T>,
 			encoded_transaction: Vec<u8>,
diff --git a/pallets/midnight/src/weights.rs b/pallets/midnight/src/weights.rs
new file mode 100644
index 00000000..62405b24
- --- /dev/null
+++ b/pallets/midnight/src/weights.rs
@@ -0,0 +1,27 @@
+use frame_support::{
+	traits::Get,
+	weights::{constants::RocksDbWeight, Weight},
+};
+use std::marker::PhantomData;
+
+pub const FIXED_MN_TRANSACTION_WEIGHT: u64 = 1_000_000_000;
+pub const FIXED_MN_BLOCK_WEIGHT: u64 = 10u64 * FIXED_MN_TRANSACTION_WEIGHT;
+
+pub trait WeightInfo {
+	fn send_mn_transaction(encoded_transaction: &Vec<u8>) -> Weight;
+}
+
+pub struct MidnightWeight<T>(PhantomData<T>);
+impl<T: frame_system::Config> WeightInfo for MidnightWeight<T> {
+	fn send_mn_transaction(_encoded_transaction: &Vec<u8>) -> Weight {
+		Weight::from_parts(FIXED_MN_TRANSACTION_WEIGHT, 0)
+			.saturating_add(T::DbWeight::get().writes(1 as u64))
+	}
+}
+
+impl WeightInfo for () {
+	fn send_mn_transaction(_encoded_transaction: &Vec<u8>) -> Weight {
+		Weight::from_parts(FIXED_MN_TRANSACTION_WEIGHT, 0)
+			.saturating_add(RocksDbWeight::get().writes(1 as u64))
+	}
+}
diff --git a/runtime/src/lib.rs b/runtime/src/lib.rs
index 8f1d9bd0..91b3ac71 100644
- --- a/runtime/src/lib.rs
+++ b/runtime/src/lib.rs
@@ -136,15 +136,29 @@ pub fn native_version() -> NativeVersion {
 
 const NORMAL_DISPATCH_RATIO: Perbill = Perbill::from_percent(75);
 
+fn block_weights_fixed_size() -> frame_system::limits::BlockWeights {
+	let expected_block_weight: Weight =
+		Weight::from_parts(2u64 * WEIGHT_REF_TIME_PER_SECOND, u64::MAX);
+	let normal_weight = NORMAL_DISPATCH_RATIO * expected_block_weight;
+	normal_weight.set_ref_time(pallet_midnight::FIXED_MN_BLOCK_WEIGHT);
+	frame_system::limits::BlockWeights::builder()
+		.for_class(frame_support::dispatch::DispatchClass::Normal, |weights| {
+			weights.max_total = normal_weight.into();
+		})
+		.for_class(frame_support::dispatch::DispatchClass::Operational, |weights| {
+			weights.max_total = expected_block_weight.into();
+			weights.reserved = (expected_block_weight - normal_weight).into();
+		})
+		.avg_block_initialization(Perbill::from_percent(10))
+		.build()
+		.expect("Sensible defaults are tested to be valid; qed")
+}
+
 parameter_types! {
 	pub const BlockHashCount: BlockNumber = 2400;
 	pub const Version: RuntimeVersion = VERSION;
 	/// We allow for 2 seconds of compute with a 6 second average block time.
- -	pub BlockWeights: frame_system::limits::BlockWeights =
- -		frame_system::limits::BlockWeights::with_sensible_defaults(
- -			Weight::from_parts(2u64 * WEIGHT_REF_TIME_PER_SECOND, u64::MAX),
- -			NORMAL_DISPATCH_RATIO,
- -		);
+	pub BlockWeights: frame_system::limits::BlockWeights = block_weights_fixed_size();
 	pub BlockLength: frame_system::limits::BlockLength = frame_system::limits::BlockLength
 		::max_with_normal_ratio(5 * 1024 * 1024, NORMAL_DISPATCH_RATIO);
 	pub const SS58Prefix: u8 = 42;
@@ -247,6 +261,7 @@ pub const EXISTENTIAL_DEPOSIT: u128 = 500;
 /// Configure the pallet-midnight in pallets/midnight.
 impl pallet_midnight::Config for Runtime {
 	type RuntimeEvent = RuntimeEvent;
+	type WeightInfo = pallet_midnight::MidnightWeight<Runtime>;
 }
 
 //todo Create the runtime by composing the FRAME pallets that were previously configured.
- -- 
2.46.0

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEE9Oz16eF+Nv5C7TpSdEmbFI1hGmwFAmhtArIACgkQdEmbFI1h
Gmy9sQ/+Lg7ANjOHNfk2Kga7dTrhzbJy6elGTBNsO/sonQL+vEU074TnGGR6+jJv
/i7weaWtRuTrQTdLQEZQtJDzkBPa9MAlCImqvUjjkPZu8cGcknOTnShsB9x1Ed++
zwsPajQbP3G0WolCz9rvc9mSplkdcDgUO2JvzLcJgOynBrExM3edYVvMVrSYCIJ5
FnUNazvY3UMZc7ufYLeRDU1laf1i5GfCThj+moG3k3HWhwWogm8/iG7bfYmYbvWJ
fHF8wUqVAgXoskJnJAvr+IL1fLNfw3uuO6J4lYteUCliO7pypLJ8fhmb0XiO38kF
hau5gh5hUs3sZjXHET7RDyUDQo/dAdQ+3CBnH3+K0e2vFgFEIVEfD/tBRBTe6pVb
I4ATisimB4WIZQNrKg4q2TvRs8v/r6Eso1rYGoGSE3REcRhm7d1XiD3Q3gafUuw1
Euicf3H753wc93fZr8zyhaSeNhrUxp66R500WIJ3yvrMdyWskaFPjmy5iaVDprOp
GKaATyaWPxhGeD93ylyg6QIhTcXlLPxVTt4r7rs+vPogPEuO3smOcQrVn/FuKtoA
nRNDgdMERZc2xagoFhHqyNqfM21BhRjEc184zaIM8j/lGV58QPQbr/i2GilyQ1Oq
qsmC2gHrobLuhnH8sxr0yA3GrCUp/rNlr4sYabne/D1xi96IKhk=
=No45
-----END PGP SIGNATURE-----
