-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

- From 9da3d321d774cca7a475de7b24b731e199ebf6d4 Mon Sep 17 00:00:00 2001
From: Sebastian Bach <sebtomba@gmail.com>
Date: Fri, 16 Jun 2023 16:29:42 +0200
Subject: [PATCH] [PM-6003] Rename WeightInfo function and parameter

- ---
 pallets/midnight/src/lib.rs     | 17 +++++++----------
 pallets/midnight/src/weights.rs |  6 +++---
 runtime/src/lib.rs              |  4 ++--
 3 files changed, 12 insertions(+), 15 deletions(-)

diff --git a/pallets/midnight/src/lib.rs b/pallets/midnight/src/lib.rs
index d21d7a89..fa337578 100644
- --- a/pallets/midnight/src/lib.rs
+++ b/pallets/midnight/src/lib.rs
@@ -14,7 +14,7 @@ pub const RUNTIME_LOG_TARGET: &str = "runtime::midnight";
 
 #[frame_support::pallet]
 pub mod pallet {
- -	use crate::RUNTIME_LOG_TARGET;
+	use crate::{weights::WeightInfo, RUNTIME_LOG_TARGET};
 	use frame_support::pallet_prelude::*;
 	use frame_system::pallet_prelude::*;
 	use midnight_ledger as ledger;
@@ -32,7 +32,7 @@ pub mod pallet {
 		type RuntimeEvent: From<Event> + IsType<<Self as frame_system::Config>::RuntimeEvent>;
 
 		/// Information on runtime weights.
- -		type WeightInfo: crate::weights::WeightInfo;
+		type WeightInfo: WeightInfo;
 	}
 
 	// The pallet's runtime storage items.
@@ -91,18 +91,15 @@ pub mod pallet {
 	#[pallet::call]
 	impl<T: Config> Pallet<T> {
 		#[pallet::call_index(0)]
- -		#[pallet::weight(T::WeightInfo::send_mn_transaction(encoded_transaction))]
- -		pub fn send_mn_transaction(
- -			_origin: OriginFor<T>,
- -			encoded_transaction: Vec<u8>,
- -		) -> DispatchResult {
+		#[pallet::weight(T::WeightInfo::mn_transaction_weight(midnight_tx))]
+		pub fn send_mn_transaction(_origin: OriginFor<T>, midnight_tx: Vec<u8>) -> DispatchResult {
 			let state = match <State<T>>::get() {
 				Some(ref state) =>
 					ledger::Ledger::from_bytes(state).map_err(|_| Error::<T>::OutOfStateStorage),
 				_ => Ok(ledger::Ledger::new()),
 			}?;
 
- -			let tx = ledger::Transaction::from_bytes(&encoded_transaction).map_err(|e| {
+			let tx = ledger::Transaction::from_bytes(&midnight_tx).map_err(|e| {
 				log::error!("❌ Can't deserialize the transaction: {}", e);
 				DispatchError::Other("Can't deserialize the transaction")
 			})?;
@@ -183,8 +180,8 @@ pub mod pallet {
 		}
 
 		fn validate_unsigned(_source: TransactionSource, call: &Call<T>) -> TransactionValidity {
- -			if let Call::send_mn_transaction { encoded_transaction } = call {
- -				let tx = ledger::Transaction::from_bytes(encoded_transaction).map_err(|e| {
+			if let Call::send_mn_transaction { midnight_tx } = call {
+				let tx = ledger::Transaction::from_bytes(midnight_tx).map_err(|e| {
 					let msg = format!("❌ Failed to validate Midnight transaction: {}", e);
 					log::warn!(target: RUNTIME_LOG_TARGET, "{}", msg);
 					Self::invalid_transaction()
diff --git a/pallets/midnight/src/weights.rs b/pallets/midnight/src/weights.rs
index 62405b24..f8fdfdca 100644
- --- a/pallets/midnight/src/weights.rs
+++ b/pallets/midnight/src/weights.rs
@@ -8,19 +8,19 @@ pub const FIXED_MN_TRANSACTION_WEIGHT: u64 = 1_000_000_000;
 pub const FIXED_MN_BLOCK_WEIGHT: u64 = 10u64 * FIXED_MN_TRANSACTION_WEIGHT;
 
 pub trait WeightInfo {
- -	fn send_mn_transaction(encoded_transaction: &Vec<u8>) -> Weight;
+	fn mn_transaction_weight(midnight_tx: &Vec<u8>) -> Weight;
 }
 
 pub struct MidnightWeight<T>(PhantomData<T>);
 impl<T: frame_system::Config> WeightInfo for MidnightWeight<T> {
- -	fn send_mn_transaction(_encoded_transaction: &Vec<u8>) -> Weight {
+	fn mn_transaction_weight(_midnight_tx: &Vec<u8>) -> Weight {
 		Weight::from_parts(FIXED_MN_TRANSACTION_WEIGHT, 0)
 			.saturating_add(T::DbWeight::get().writes(1 as u64))
 	}
 }
 
 impl WeightInfo for () {
- -	fn send_mn_transaction(_encoded_transaction: &Vec<u8>) -> Weight {
+	fn mn_transaction_weight(_midnight_tx: &Vec<u8>) -> Weight {
 		Weight::from_parts(FIXED_MN_TRANSACTION_WEIGHT, 0)
 			.saturating_add(RocksDbWeight::get().writes(1 as u64))
 	}
diff --git a/runtime/src/lib.rs b/runtime/src/lib.rs
index 91b3ac71..2c42734b 100644
- --- a/runtime/src/lib.rs
+++ b/runtime/src/lib.rs
@@ -336,8 +336,8 @@ impl_runtime_apis! {
 		fn get_decoded_tarnsactions(extrinsics: Vec<<Block as BlockT>::Extrinsic>) -> Vec<TransactionType>  {
 			extrinsics.iter().map(|tx| {
 				match &tx.function {
- -					RuntimeCall::Midnight(MidnightCall::send_mn_transaction { encoded_transaction }) => {
- -						TransactionType::MidnightTx(encoded_transaction.clone())
+					RuntimeCall::Midnight(MidnightCall::send_mn_transaction { midnight_tx }) => {
+						TransactionType::MidnightTx(midnight_tx.clone())
 					},
 					RuntimeCall::Timestamp(TimestampCall::set { now } ) =>{
 						let decoded:u64 = (*now).into();
- -- 
2.46.0

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEE9Oz16eF+Nv5C7TpSdEmbFI1hGmwFAmhtArIACgkQdEmbFI1h
GmydNg//c21zgzlu+kv5wTcTitk/2Mjfz0taRSfXY51kz5OZc3gW3Cz7a55TNiJe
2nAqeqfhOXvM8cE48Ra0i5pTfQw7J1bRhgTK+eVdSWYTH9cRZxZVXgisM1MUP6+6
N69s73qr1J27z0IfLpPPlu+bK9JYwc7BcRi7KXWFgN5rex90V2XqfiMVoK4HBFJR
iu9renAB4L54fG2a4UtaR0dtLyMOMPSTckK0ZRKT5NGoHYH79LCV5wDP6anqLvOK
oO3dFucR9rD5Q8vIpf6XKzbb/ZZKd8RwLYgEM8KaiDz/0nB+wgYNE0dVPOsro1Mb
zCuoiHXac7oQAJzvnZ9WLuHEAYZvtznaYm6TKsk2v3DKB+KU+zOMRMGcOS5fHmdY
C2Cy1lvBspq1cpwkMGMa90jM2iGkaQp9SJlboRtQG2rqnQ7ITib0sPIZRwBgRdOj
uCKXdnI4NvWSaIgayOUe/JzcTkxS4FxxdrTB07dhayOBN7DhLnkFeB6/rat+rplR
kbSCqRSGkPIz07PmeTTQ5yAxOLInDCCN2UTO8tbQZxGitlONHgR5dAdQ8aVVn1Kw
42obtLxZlvECXwFxPxmkdnEJQeLkQ7MAfSXGXHLraEh3yARd6lZW2PEOaoui9XU3
fFjRgyEBYKBe1iQfafP5Joj+ofCsYdqMlV6UT5lbrwA/YcPXI/M=
=VaNP
-----END PGP SIGNATURE-----
