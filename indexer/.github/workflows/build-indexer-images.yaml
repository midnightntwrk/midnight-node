name: build-indexer-images

on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:
    inputs:
      node_tag:
        description: "Node tag to use for testing (e.g., 0.13.2-rc.1)"
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build and push
    runs-on: ubuntu-latest-16-core-x64
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - name: chain-indexer
            description: Midnight Chain Indexer
          - name: indexer-api
            description: Midnight Indexer API
          - name: wallet-indexer
            description: Midnight Wallet Indexer
          - name: indexer-standalone
            description: Midnight Indexer
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Set up environment
        env:
          toolchain_toml: "rust-toolchain.toml"
        run: |
          toolchain=$(grep channel rust-toolchain.toml | sed -r 's/channel = "(.*)"/\1/')
          echo "toolchain=$toolchain" | tee -a $GITHUB_ENV
          version=$(grep '^version.*=' Cargo.toml | sed -E 's/version.*=.*"(.*)"/\1/')
          echo "version=$version" | tee -a $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_MIDNIGHTNTWRK_USER }}
          password: ${{ secrets.DOCKERHUB_MIDNIGHTNTWRK_TOKEN }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: MidnightCI
          password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Prepare metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_SHORT_SHA_LENGTH: 8
        with:
          images: |
            ghcr.io/midnight-ntwrk/${{ matrix.name }}
            ${{ github.ref_type == 'tag' && format('midnightntwrk/{0}', matrix.name) || '' }}
          tags: |
            type=semver,pattern={{version}}
            ${{ github.ref_type != 'tag' && format('type=sha,prefix={0}-,format=short', env.version) || '' }}
          labels: |
            org.opencontainers.image.source=https://github.com/midnightntwrk/midnight-indexer/
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=${{ matrix.description }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:qemu-v8.1.5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.name }}/Dockerfile
          push: true
          build-args: RUST_VERSION=${{ env.toolchain }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/midnight-ntwrk/${{ matrix.name }}:buildcache
          cache-to: type=registry,ref=ghcr.io/midnight-ntwrk/${{ matrix.name }}:buildcache,mode=max

  docker-compose-test:
    name: Docker Compose Validation
    needs: build-and-push
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        profile: [cloud, standalone]
    env:
      APP__INFRA__STORAGE__PASSWORD: ${{ secrets.APP__INFRA__STORAGE__PASSWORD }}
      APP__INFRA__PUB_SUB__PASSWORD: ${{ secrets.APP__INFRA__PUB_SUB__PASSWORD }}
      APP__INFRA__LEDGER_STATE_STORAGE__PASSWORD: ${{ secrets.APP__INFRA__LEDGER_STATE_STORAGE__PASSWORD }}
      APP__INFRA__SECRET: ${{ secrets.APP__INFRA__SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Docker versions
        run: |
          docker version
          docker compose version

      - name: Validate Docker Compose syntax
        run: |
          echo "Validating Docker Compose syntax for ${{ matrix.profile }} profile..."
          docker compose --profile ${{ matrix.profile }} config --quiet
          echo "Docker Compose syntax validation completed successfully"

      - name: Store indexer version
        env:
          toolchain_toml: "rust-toolchain.toml"
        run: |
          version=$(grep '^version.*=' Cargo.toml | sed -E 's/version.*=.*"(.*)"/\1/')
          echo "version=$version" | tee -a $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: MidnightCI
          password: ${{ secrets.MIDNIGHTCI_PACKAGES_WRITE }}

      - name: Prepare metadata (tag) for Docker
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_SHORT_SHA_LENGTH: 8
        with:
          # Note version is set above in Set up environment
          tags: |
            type=semver,pattern={{version}}
            ${{ github.ref_type != 'tag' && format('type=sha,prefix={0}-,format=short', env.version) || '' }}

      - name: Set up Indexer Tag to target
        run: |
          echo "Raw tags output: ${{ steps.meta.outputs.tags }}"
          tag_count=$(echo "${{ steps.meta.outputs.tags }}" | grep -c .)

          if [ "$tag_count" -ne 1 ]; then
            echo "Expected exactly one Docker tag, but got $tag_count:"
            exit 1
          fi

          # Extract the single tag
          INDEXER_TAG=$(echo "${{ steps.meta.outputs.tags }}" | cut -d ':' -f2)
          echo "Using INDEXER_TAG=$INDEXER_TAG"
          echo "INDEXER_TAG=$INDEXER_TAG" >> $GITHUB_ENV

      - name: Set up Node Tag to target
        run: |
          # Use workflow dispatch input if provided, otherwise read from NODE_VERSION file
          if [ -n "${{ github.event.inputs.node_tag }}" ]; then
            echo "Using node tag from workflow dispatch: ${{ github.event.inputs.node_tag }}"
            echo "NODE_TAG=${{ github.event.inputs.node_tag }}" >> $GITHUB_ENV
          else
            echo "Reading node tag from NODE_VERSION file..."
            node_tag=$(cat NODE_VERSION)
            echo "Using node tag: $node_tag"
            echo "NODE_TAG=$node_tag" >> $GITHUB_ENV
          fi

      - name: Docker Compose Up
        run: |
          echo "Compose up with:"
          echo "- Indexer tag: $INDEXER_TAG"
          echo "- Node tag   : $NODE_TAG"
          docker compose --profile "${{ matrix.profile }}" up -d

      - name: Show running containers
        run: docker compose ps

      - name: Wait for services to be healthy
        run: |
          # Wait for up to 60 seconds for all healthchecks to pass
          for i in $(seq 1 12); do
            echo "Check for services to be healthy... attempt $i"
            unhealthy=$(docker compose ps |grep -E 'unhealthy|starting' || true)
            if [ -z "$unhealthy" ]; then
              echo "All services healthy!"
              exit 0
            else
              echo "Unhealthy services: $unhealthy"
            fi
            sleep 5
          done
          echo "Some services failed to become healthy:"
          exit 1

      - name: Show logs (on failure)
        if: failure()
        run: docker compose logs

      - name: Tear down
        if: always()
        run: docker compose down -v
